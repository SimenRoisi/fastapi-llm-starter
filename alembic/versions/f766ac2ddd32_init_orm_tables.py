"""init orm tables

Revision ID: f766ac2ddd32
Revises: init_schema_001
Create Date: 2025-09-16 16:38:05.372333

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f766ac2ddd32'
down_revision: Union[str, None] = 'init_schema_001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_documents_owner_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_documents'))
    )
    op.create_index(op.f('ix_documents_created_at'), 'documents', ['created_at'], unique=False)
    op.create_index(op.f('ix_documents_owner_id'), 'documents', ['owner_id'], unique=False)
    op.alter_column('api_usage', 'timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_api_usage_endpoint'), table_name='api_usage')
    op.create_index('ix_api_usage_api_key_endpoint_time', 'api_usage', ['api_key', 'endpoint', 'timestamp'], unique=False)
    op.create_index(op.f('ix_api_usage_timestamp'), 'api_usage', ['timestamp'], unique=False)
    op.drop_constraint(op.f('api_usage_api_key_fkey'), 'api_usage', type_='foreignkey')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('users_api_key_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_unique_constraint('uq_users_api_key', 'users', ['api_key'])
    op.create_unique_constraint('uq_users_email', 'users', ['email'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('uq_users_email', 'users', type_='unique')
    op.drop_constraint('uq_users_api_key', 'users', type_='unique')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_api_key_key'), 'users', ['api_key'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_foreign_key(op.f('api_usage_api_key_fkey'), 'api_usage', 'users', ['api_key'], ['api_key'])
    op.drop_index(op.f('ix_api_usage_timestamp'), table_name='api_usage')
    op.drop_index('ix_api_usage_api_key_endpoint_time', table_name='api_usage')
    op.create_index(op.f('ix_api_usage_endpoint'), 'api_usage', ['endpoint'], unique=False)
    op.alter_column('api_usage', 'timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_documents_owner_id'), table_name='documents')
    op.drop_index(op.f('ix_documents_created_at'), table_name='documents')
    op.drop_table('documents')
    # ### end Alembic commands ###
